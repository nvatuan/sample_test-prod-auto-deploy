name: Check auto deploy PR from `main` to `prod`

on:
  pull_request:
    branches:
      - prod
    types:
      - opened
      - synchronize
      - reopened
      
permissions:
  pull-requests: write

concurrency:
  group: auto-promote
  cancel-in-progress: true

jobs:
  stschk_merge-from-main-to-prod:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'prod'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check PR branch from `main`
        run: |
          if [[ "${{ github.event.pull_request.head.ref }}" == "main" ]]; then
            echo "OK: PR head branch is 'main'"
            exit 0
          fi
          echo "ERR: PR head branch is not 'main'"
          exit 1
      
      - name: Write comment if PR head branch is not `main`
        uses: marocchino/sticky-pull-request-comment@v2
        if: failure()
        with:
          header: remind-wrong-branch
          message: |
            # ðŸš« PULL REQUEST MERGE TO `prod` MUST BE FROM `main`

            Please add your change in the `main` branch and open a new PR to `prod`.

  auto-promote-to-prod:
    runs-on: ubuntu-latest
    needs: stschk_merge-from-main-to-prod
    permissions: write-all
    if: github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'prod' && github.event.pull_request.head.ref == 'main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect file changes
        id: detect-safe-changes
        run: |
          git diff --name-only origin/prod...HEAD > changed-files.txt
          echo "Changed files:"
          cat changed-files.txt
          
          safe_to_merge=true
          for file in $(cat changed-files.txt); do
            safe_change=false
            echo "FILE: $file"
            for safe_prefix in $(cat .github/workflows/misc/auto-deploy-prefix.txt); do
              echo "-- Prefix: $safe_prefix"
              if [[ $file == $safe_prefix* ]]; then
                safe_change=true
                break
              fi
            done

            if [[ $safe_change == false ]]; then
              safe_to_merge=false
              echo "unsafe_changes=$file" >> $GITHUB_OUTPUT
              break
            fi
          done
          echo "Output safe_to_merge: $safe_to_merge"
          echo "safe_to_merge=$safe_to_merge" >> $GITHUB_OUTPUT
    
      - name: Approve and merge if they are safe to merge
        id: approve-merge
        if: steps.detect-safe-changes.outputs.safe_to_merge == 'true'
        env:
          gh_token: ${{ secrets.github_token }}
        run: |
          echo "OK: Safe to merge"
          gh pr merge ${{ github.event.number }} --auto --merge
      
      - name: Add comments if need approval
        id: comment-if-need-approval
        if: steps.detect-safe-changes.outputs.safe_to_merge == 'false'
        env:
          unsafe_changes: ${{ steps.detect-safe-changes.outputs.unsafe_changes }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: remind-approval
          message: |
            ## :warning: Needs Manual Approval and Merge

            This PR contains unsafe changes. Please review the changes and approve the merge manually.
            Found unsafe changes:
            ```
            * $unsafe_changes
            ```
      
      - name: Add reviewers if need approval
        id: assign-if-need-approval
        if: steps.detect-safe-changes.outputs.safe_to_merge == 'false'
        env:
          gh_token: ${{ secrets.github_token }}
        run: |
          gh pr edit ${{ github.event.number }} --add-reviewer ${{ github.actor }}
